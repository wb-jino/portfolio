@charset "UTF-8";

$font-stack: Helvetica, sans-serif;
$primary-color: #333;

@mixin clearfix() {
	&::after {
		clear: both;
		content: '';
		display: block;
	}
}

@mixin border-radius($radius) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

@mixin transform($transforms...) {
	// combine the passed transforms into a space separated list
	$transform-list: join($transforms, null, space);

	// print out the transforms
	-webkit-transform: $transform-list;
	-moz-transform: $transform-list;
	-ms-transform: $transform-list;
	-o-transform: $transform-list;
	transform: $transform-list;
}
/*	ex) @include transform( rotate(90deg), translate(0,9px), // ... add more transforms if you need); */

@mixin transform-origin($origin...) {
	-webkit-transform-origin: $origin;
	-moz-transform-origin: $origin;
	-ms-transform-origin: $origin;
	-o-transform-origin: $origin;
	transform-origin: $origin;
}

@mixin transition($transition...) {
	-moz-transition:    $transition;
	-ms-transition:    $transition;
	-o-transition:      $transition;
	-webkit-transition: $transition;
	transition:         $transition;
}
@mixin transition-property($property...) {
	-moz-transition-property:    $property;
	-ms-transition-property:    $property;
	-o-transition-property:      $property;
	-webkit-transition-property: $property;
	transition-property:         $property;
}
@mixin transition-duration($duration...) {
	-moz-transition-property:    $duration;
	-ms-transition-property:    $duration;
	-o-transition-property:      $duration;
	-webkit-transition-property: $duration;
	transition-property:         $duration;
}
@mixin transition-timing-function($timing...) {
	-moz-transition-timing-function:    $timing;
	-ms-transition-timing-function:    $timing;
	-o-transition-timing-function:      $timing;
	-webkit-transition-timing-function: $timing;
	transition-timing-function:         $timing;
}
@mixin transition-delay($delay...) {
	-moz-transition-delay:    $delay;
	-ms-transition-delay:    $delay;
	-o-transition-delay:      $delay;
	-webkit-transition-delay: $delay;
	transition-delay:         $delay;
}
/* ex) @include transition(background-color 1s 2s, color 2s); */

@mixin text-shorten {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}

@mixin breakpoint($point) {
	@if $point == large {
		@media only screen and (max-width: 1366px) {
			@content;
		}
	}
	@else if $point == desktop {
		@media only screen and (max-width: 1024px) {
			@content;
		}
	}
	@else if $point == tablet {
		@media only screen and (max-width: 768px) {
			@content;
		}
	}
	@else if $point == mobile {
		@media only screen and (max-width: 425px) {
			@content;
		}
	}
	@else if $point == samll {
		@media only screen and (max-width: 320px) {
			@content;
		}
	}
}
/* ex) @include breakpoint(large){} */

@mixin box-shadow( $args... ) {
	-webkit-box-shadow: $args;
	-moz-box-shadow: $args;
	box-shadow: $args;
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
	width: 0;
	height: 0;
	@if ($direction == left) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == right) {
		border-top: $size solid transparent;
		border-bottom: $size solid transparent;
		border-left: $size solid $color;
	}
	@else if ($direction == down) {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-top: $size solid $color;
	}
	@else {
		border-left: $size solid transparent;
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	}
}
/*
 ex)
    // without arguments (default)
	div {
	   @include arrow();
	}

	// with custom arguments
	div {
	   @include arrow(up, 10px, #efefef);
	}
*/

@mixin animation($animation){
	-webkit-animation: $animation;
	-o-animation: $animation;
	animation: $animation;
}